### ✅ HashMap in Java

🔸 **Definition:**
- Part of Java Collections Framework.
- Implements the `Map<K, V>` interface.
- Stores data as key-value pairs.
- Keys must be unique; one key maps to one value.

🔸 **Characteristics:**
- ❌ Does **not maintain order** (neither insertion nor sorted).
- ✅ **Allows one null key** and **multiple null values**.
- ✅ **Values can be duplicated**, but keys cannot.
- ❌ Not thread-safe (use `Collections.synchronizedMap()` or `ConcurrentHashMap` if needed).

🔸 **Common Methods:**
- `put(K key, V value)` – Adds or updates a key-value pair.
- `get(Object key)` – Returns the value for the given key.
- `containsKey(Object key)` – Checks if a key exists.
- `containsValue(Object value)` – Checks if a value exists.
- `remove(Object key)` – Removes the key-value pair for the given key. And it returns a boolean.
- `keySet()` – Returns a `Set` of all keys.
- `values()` – Returns a `Collection` of all values.
- `entrySet()` – Returns a `Set` of all key-value mappings.

Time Performance for each above method is in O(1).

🔸 **Usage Example:**
```java
Map<String, Integer> map = new HashMap<>();
map.put("apple", 3);
map.put("banana", 2);
System.out.println(map.get("apple")); // Output: 3
```

### 🔍 Internal Working of HashMap in Java

1. **Hashing Process:**
   - When a key-value pair is inserted using `.put(key, value)`, the key is passed to a **hash function**.
   - The hash function generates a **hash code** (an integer).

2. **Index Calculation:**
   - From the hash code, the bucket index in the internal array is computed using:
     ```
     index = hashCode % arraySize;
     ```
   - In practice, Java uses `(hash & (n - 1))` for better performance when array size is a power of 2.

3. **Storing the Entry:**
   - The key-value pair is placed in the bucket (array index) returned by the hash.
   - If that index already contains entries (collision), Java uses:
     - **Linked List (Java 7 and earlier)**
     - **Balanced Tree (Java 8+)** if entries exceed a threshold (for faster lookup).

4. **Retrieving a Value:**
   - The key is passed through the same hash function.
   - The index is calculated.
   - Java checks for the correct key at that index (handles hash collisions by comparing keys via `.equals()`).

---

########################################################################################################################
While writing our custom class we must must override hash function and equals function to keep our class work correctly.